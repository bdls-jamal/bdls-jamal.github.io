{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["App","useState","openedDoors","setOpenedDoors","Date","now","setNow","modalContent","setModalContent","useEffect","timer","setInterval","clearInterval","openDoorAndShowMessage","door","isAlreadyOpen","includes","day","isAllowedToOpen","prev","type","value","message","date","localToday","yyyy","getFullYear","mm","String","getMonth","padStart","dd","getDate","getCountdown","targetDate","unlockTime","setHours","diff","getTime","hours","Math","floor","minutes","seconds","getDoorImage","className","doors","map","index","doorDate","dateStr","split","Number","year","month","parseLocalDate","dateString","allowed","backgroundImage","toDateString","src","alt","onError","e","target","onClick","openDoorAndShowPhoto","stopPropagation","style","maxWidth","maxHeight","width","height","borderRadius","objectFit","display","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2804f630.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport doors from \"./json/doors.json\";\r\n\r\nfunction App() {\r\n  const [openedDoors, setOpenedDoors] = useState<string[]>([]);\r\n  const [now, setNow] = useState(new Date());\r\n  const [modalContent, setModalContent] = useState<null | { type: \"message\"; value: string } | { type: \"image\"; value: string }>(null);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => setNow(new Date()), 1000);\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  const parseLocalDate = (dateStr: string) => {\r\n    const [year, month, day] = dateStr.split(\"-\").map(Number);\r\n    return new Date(year, month - 1, day);\r\n  };\r\n\r\n  const openDoorAndShowMessage = (door: { day: string; message: string }) => {\r\n    const isAlreadyOpen = openedDoors.includes(door.day);\r\n    if (!isAllowedToOpen(door.day)) return;\r\n  \r\n    if (!isAlreadyOpen) {\r\n      setOpenedDoors(prev => [...prev, door.day]);\r\n    }\r\n  \r\n    setModalContent({ type: \"message\", value: door.message });\r\n  };\r\n  \r\n  const openDoorAndShowPhoto = (door: { day: string; message: string }) => {\r\n    const isAlreadyOpen = openedDoors.includes(door.day);\r\n    if (!isAllowedToOpen(door.day)) return;\r\n  \r\n    if (!isAlreadyOpen) {\r\n      setOpenedDoors(prev => [...prev, door.day]);\r\n    }\r\n  \r\n    setModalContent({ type: \"image\", value: getDoorImage(door.day) });\r\n  };\r\n  \r\nconst isAllowedToOpen = (date: string) => {\r\n  const localToday = new Date();\r\n  const yyyy = localToday.getFullYear();\r\n  const mm = String(localToday.getMonth() + 1).padStart(2, \"0\");\r\n  const dd = String(localToday.getDate()).padStart(2, \"0\");\r\n  const todayStr = `${yyyy}-${mm}-${dd}`;\r\n\r\n  return todayStr >= date;\r\n};\r\n\r\n  \r\n\r\n  const getCountdown = (targetDate: Date) => {\r\n    const unlockTime = new Date(targetDate);\r\n    unlockTime.setHours(0, 0, 0, 0);\r\n    const diff = unlockTime.getTime() - now.getTime();\r\n    if (diff <= 0) return \"Ready!\";\r\n    const hours = Math.floor(diff / 3600000);\r\n    const minutes = Math.floor((diff % 3600000) / 60000);\r\n    const seconds = Math.floor((diff % 60000) / 1000);\r\n    return `${hours}h ${minutes}m ${seconds}s`;\r\n  };\r\n\r\n  const getDoorImage = (date: string) => {\r\n    return `/img/doors/${date}.jpg`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"calendar\">\r\n        {doors.map((door, index) => {\r\n          const doorDate = parseLocalDate(door.day);\r\n          const dateString = door.day;\r\n          const allowed = isAllowedToOpen(dateString);\r\n          const backgroundImage = getDoorImage(dateString);\r\n\r\n          return (\r\n            <div key={index} className=\"door-wrapper\">\r\n              <p className=\"door-date\">{doorDate.toDateString()}</p>\r\n              <div className={`door ${allowed ? \"clickable\" : \"locked\"}`}>\r\n                <img\r\n                  src={backgroundImage}\r\n                  alt=\"door\"\r\n                  className={`door-image ${allowed ? \"\" : \"blurred\"}`}\r\n                  onError={(e) => {\r\n                    (e.target as HTMLImageElement).src = \"/img/calendar_backdrop.jpg\";\r\n                  }}\r\n                />\r\n\r\n                {/* Locked overlay */}\r\n                {!allowed && (\r\n                  <div className=\"door-overlay\">\r\n                    <div className=\"door-front\">\r\n                      <p className=\"countdown\">{getCountdown(doorDate)}</p>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Buttons for opened door */}\r\n                {allowed && (\r\n                  <div className=\"door-buttons\">\r\n                    <button\r\n                      className=\"door-btn\"\r\n                      onClick={() => openDoorAndShowPhoto(door)}\r\n                    >\r\n                      View Photo\r\n                    </button>\r\n                    <button\r\n                      className=\"door-btn\"\r\n                      onClick={() => openDoorAndShowMessage(door)}\r\n                    >\r\n                      Message\r\n                    </button>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Entire box still clickable for locked/opening fallback */}\r\n                {allowed && (\r\n                  <div\r\n                    className=\"door-overlay door-clickable\"\r\n                    onClick={() => openDoorAndShowMessage(door)}\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {modalContent && (\r\n        <div className=\"modal-overlay\" onClick={() => setModalContent(null)}>\r\n          <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n            <button className=\"modal-close\" onClick={() => setModalContent(null)}>Ã—</button>\r\n            {modalContent.type === \"message\" ? (\r\n              <p>{modalContent.value}</p>\r\n            ) : (\r\n              <img src={modalContent.value} alt=\"I must have trolled whoops\" style={{\r\n                maxWidth: \"90vw\",\r\n                maxHeight: \"80vh\",\r\n                width: \"auto\",\r\n                height: \"auto\",\r\n                borderRadius: \"8px\",\r\n                objectFit: \"contain\",\r\n                display: \"block\",\r\n                margin: \"0 auto\"\r\n              }} />\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}